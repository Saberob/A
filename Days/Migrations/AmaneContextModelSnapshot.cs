// <auto-generated />
using System;
using Days.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Days.Migrations
{
    [DbContext(typeof(AmaneContext))]
    partial class AmaneContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Days.Models.AplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Days.Models.Consejo", b =>
                {
                    b.Property<int>("ConsejoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConsejoID")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("ConsejoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Consejos");
                });

            modelBuilder.Entity("Days.Models.ConsejosHabito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int?>("ConsejoId")
                        .HasColumnType("int")
                        .HasColumnName("ConsejoID");

                    b.Property<int?>("HabitoId")
                        .HasColumnType("int")
                        .HasColumnName("HabitoID");

                    b.HasKey("Id");

                    b.HasIndex("ConsejoId");

                    b.HasIndex("HabitoId");

                    b.ToTable("ConsejosHabitos");
                });

            modelBuilder.Entity("Days.Models.Habito", b =>
                {
                    b.Property<int>("HabitoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HabitoID")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("HabitoId");

                    b.ToTable("Habitos");
                });

            modelBuilder.Entity("Days.Models.HabitosPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int?>("HabitoId")
                        .HasColumnType("int")
                        .HasColumnName("HabitoID");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("HabitoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("HabitosPerfil");
                });

            modelBuilder.Entity("Days.Models.Mensaje", b =>
                {
                    b.Property<int>("MensajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MensajeID")
                        .UseIdentityColumn();

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Link")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("SalaId")
                        .HasColumnType("int")
                        .HasColumnName("SalaID");

                    b.Property<int?>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("MensajeId");

                    b.HasIndex("SalaId");

                    b.HasIndex("TipoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Mensajes");
                });

            modelBuilder.Entity("Days.Models.Perfil", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Cumpleaños")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UsuarioId")
                        .HasName("PK__Perfil__2B3DE79800E1E497");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("Days.Models.Sala", b =>
                {
                    b.Property<int>("SalaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalaID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<int?>("TipoId")
                        .HasColumnType("int")
                        .HasColumnName("TipoID");

                    b.HasKey("SalaId");

                    b.HasIndex("TipoId");

                    b.ToTable("Sala");
                });

            modelBuilder.Entity("Days.Models.SalaUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("SalaId")
                        .HasColumnType("int")
                        .HasColumnName("SalaID");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("SalaId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SalaUsuario");
                });

            modelBuilder.Entity("Days.Models.TipoMensaje", b =>
                {
                    b.Property<int>("TipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("TipoId")
                        .HasName("PK__TipoMens__97099E97F9283B4E");

                    b.ToTable("TipoMensaje");
                });

            modelBuilder.Entity("Days.Models.TipoSala", b =>
                {
                    b.Property<int>("TipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipoID")
                        .UseIdentityColumn();

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("TipoId")
                        .HasName("PK__TipoSala__97099E97F7CBAA65");

                    b.ToTable("TipoSala");
                });

            modelBuilder.Entity("Days.Models.UsuarioLogin", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginID")
                        .UseIdentityColumn();

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("UsuarioID");

                    b.HasKey("LoginId")
                        .HasName("PK__UsuarioL__4DDA283849352750");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuarioLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Days.Models.Consejo", b =>
                {
                    b.HasOne("Days.Models.Perfil", "Usuario")
                        .WithMany("Consejos")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK__Consejos__Usuari__412EB0B6")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Days.Models.ConsejosHabito", b =>
                {
                    b.HasOne("Days.Models.Consejo", "Consejo")
                        .WithMany("ConsejosHabitos")
                        .HasForeignKey("ConsejoId")
                        .HasConstraintName("FK__ConsejosH__Conse__44FF419A");

                    b.HasOne("Days.Models.Habito", "Habito")
                        .WithMany("ConsejosHabitos")
                        .HasForeignKey("HabitoId")
                        .HasConstraintName("FK__ConsejosH__Habit__440B1D61")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Consejo");

                    b.Navigation("Habito");
                });

            modelBuilder.Entity("Days.Models.HabitosPerfil", b =>
                {
                    b.HasOne("Days.Models.Habito", "Habito")
                        .WithMany("HabitosPerfils")
                        .HasForeignKey("HabitoId")
                        .HasConstraintName("FK__HabitosPe__Habit__48CFD27E");

                    b.HasOne("Days.Models.Perfil", "Usuario")
                        .WithMany("HabitosPerfils")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK__HabitosPe__Usuar__47DBAE45")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Habito");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Days.Models.Mensaje", b =>
                {
                    b.HasOne("Days.Models.Sala", "Sala")
                        .WithMany("Mensajes")
                        .HasForeignKey("SalaId")
                        .HasConstraintName("FK__Mensajes__SalaID__534D60F1");

                    b.HasOne("Days.Models.TipoMensaje", "Tipo")
                        .WithMany("Mensajes")
                        .HasForeignKey("TipoId")
                        .HasConstraintName("FK__Mensajes__TipoID__5441852A");

                    b.HasOne("Days.Models.Perfil", "Usuario")
                        .WithMany("Mensajes")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK__Mensajes__Usuari__52593CB8")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Sala");

                    b.Navigation("Tipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Days.Models.Sala", b =>
                {
                    b.HasOne("Days.Models.TipoSala", "Tipo")
                        .WithMany("Salas")
                        .HasForeignKey("TipoId")
                        .HasConstraintName("FK__Sala__TipoID__4BAC3F29");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("Days.Models.SalaUsuario", b =>
                {
                    b.HasOne("Days.Models.Sala", "Sala")
                        .WithMany("SalaUsuarios")
                        .HasForeignKey("SalaId")
                        .HasConstraintName("FK__SalaUsuar__SalaI__4E88ABD4");

                    b.HasOne("Days.Models.Perfil", "Usuario")
                        .WithMany("SalaUsuarios")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK__SalaUsuar__Usuar__4F7CD00D")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Sala");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Days.Models.UsuarioLogin", b =>
                {
                    b.HasOne("Days.Models.Perfil", "Usuario")
                        .WithMany("UsuarioLogins")
                        .HasForeignKey("UsuarioId")
                        .HasConstraintName("FK__UsuarioLo__Usuar__3E52440B")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Days.Models.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Days.Models.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Days.Models.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Days.Models.AplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Days.Models.Consejo", b =>
                {
                    b.Navigation("ConsejosHabitos");
                });

            modelBuilder.Entity("Days.Models.Habito", b =>
                {
                    b.Navigation("ConsejosHabitos");

                    b.Navigation("HabitosPerfils");
                });

            modelBuilder.Entity("Days.Models.Perfil", b =>
                {
                    b.Navigation("Consejos");

                    b.Navigation("HabitosPerfils");

                    b.Navigation("Mensajes");

                    b.Navigation("SalaUsuarios");

                    b.Navigation("UsuarioLogins");
                });

            modelBuilder.Entity("Days.Models.Sala", b =>
                {
                    b.Navigation("Mensajes");

                    b.Navigation("SalaUsuarios");
                });

            modelBuilder.Entity("Days.Models.TipoMensaje", b =>
                {
                    b.Navigation("Mensajes");
                });

            modelBuilder.Entity("Days.Models.TipoSala", b =>
                {
                    b.Navigation("Salas");
                });
#pragma warning restore 612, 618
        }
    }
}
